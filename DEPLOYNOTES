.. _DEPLOYNOTES:

DEPLOYNOTES
***********

Instructions for installation & upgrade notes.

Installation
============

Software Dependencies
---------------------

We recommend the use of `pip <http://pip.openplans.org/>`_ and `virtualenv
<http://virtualenv.openplans.org/>`_ for environment and dependency
management in this and other Python projects. If you don't have them
installed we recommend ``sudo easy_install pip`` and then ``sudo pip install
virtualenv``.


Configure the environment
^^^^^^^^^^^^^^^^^^^^^^^^^

When first installing this project, you'll need to create a virtual environment
for it. The environment is just a directory. You can store it anywhere you like;
in this documentation itâ€™ll live right next to the source. For instance, if the
source is in /home/thekeep/src, consider creating an environment in
/home/thekeep/env. To create such an environment, su into apache's user
and::

  $ virtualenv --no-site-packages /home/thekeep/env

This creates a new virtual environment in that directory. Source the activation
file to invoke the virtual environment (requires that you use the bash shell)::

  $ . /home/thekeep/env/bin/activate

Once the environment has been activated inside a shell, Python programs
spawned from that shell will read their environment only from this
directory, not from the system-wide site packages. Installations will
correspondingly be installed into this environment.

.. Note::
  Installation instructions and upgrade notes below assume that
  you are already in an activated shell.

Install python dependencies
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The Keep depends on several python libraries. The installation is mostly
automated, and will print status messages as packages are installed. If there
are any errors, pip should announce them very loudly.

To install python dependencies, cd into the repository checkout and::

  $ pip install -r pip-dependencies

If you are a developer or are installing to a continuous ingration server
where you plan to run unit tests, code coverage reports, or build sphinx
documentation, you probably will also want to::

  $ pip install -r build-dependencies

After this step, your virtual environment should contain all of the
dependencies for The Keep.

Alternatively, you can use the fabric deploy/build script to install
dependencies for you::

  $ pip install fabric
  $ fab install_deps

Known Issues
""""""""""""

* As of 01/2011, there is a problem installing **python-magic** with pip; this
  is apparently caused by either an incorrect dependency on a ctypes PyPi package
  or a problem with the PyPi ctypes package that causes it to be uninstallable.
  As a work-around, python-magic can be manually installed without dependencies::

    $ pip install --no-deps python-magic

  You may need to comment out python-magic in the pip-dependencies file to allow
  the other packages to install correctly.

* As of 03/2011, installing **eullocal** from git via pip does not install
  the eullocal template themes correctly.  The easiest way to fix this is to
  manually create a symbolic link from the root of your virtualenv to the
  eullocal theme directory::

    $ cd /home/thekeep/env
    $ ln -s src/eullocal/themes/


Install/Configure System Dependencies
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Fedora
""""""

The Keep expects to connect to a Fedora-Commons repository version
3.4.x.  Fedora should be configured as follows:

* LDAP login filter
* To support large file ingest, the storage length for uploaded file
  should be increased from the default value of 5 minutes, e.g.:

.. code-block:: xml

  <param name="uploadStorageMinutes" value="15">

*  XACML policy enforcement enabled with  a combining algorithm of
   Permit-Overrides.  You should have the following in the fedora.fcfg:

.. code-block:: xml

  <param name="XACML-COMBINING-ALGORITHM" value="com.sun.xacml.combine.OrderedPermitOverridesPolicyAlg"/>
  <param name="ENFORCE-MODE" value="enforce-policies"/>

Fedora xacml repository policies should be installed from
https://svn.library.emory.edu/svn/fedora/repository-policies/ (or from
the most recently tagged version of the repository-policies, as
identified in version-specific upgrade notes).  This checkout should
include a policy file named
**permit-keep-content-if-keep-admin-or-server.xml** in the directory
of Keep-specific policies.  The default configuration should be
suitable for a production environment, but if you are deploying the
policies to another environment, you should update the policy to
include the IP address of the server where the web application will
run.

The Keep relies on EULindexer for searching and indexing. See the
`EULindexer Deploy Notes
<https://github.com/emory-libraries/eulindexer/blob/master/DEPLOYNOTES.rst>`_
for additional Fedora configuration requirements for that program.

Celery/RabbitMQ
"""""""""""""""

We use celery for asynchronous tasks (currently only WAV to MP3 audio
encoding), which requires a task broker.  We recommend RabbitMQ.  For
more information on configuring this, please see
http://celeryq.org/docs/getting-started/broker-installation.html

Solr/EULindexer
"""""""""""""""

The Keep uses Solr for searching Fedora content.  The Solr schema
included with the source code at ``solr/schema.xml`` should be used as
the Solr schema configuration.  Solr should be configured to
autocommit index changes within a fairly brief time period (perhaps
1-3 seconds); edit the Solr configuration file ``solrconfig.xml`` and
set a value for ``maxTime`` in the ``autoCommit`` section.

The url for accessing the configured Solr instance should be added to
Keep ``localsettings.py`` as **SOLR_SERVER_URL**.

Repository content created and updated by the Keep should be indexed
using **EULindexer**.  To add the Keep to an installed and configured
instance of EULindexer, add the Keep indexdata url to the
eulindexer ``localsettings.py``, e.g.::

    INDEXER_SITE_URLS = {
        'keep': 'http://keep.library.emory.edu:/indexdata/',
    }

To populate the index initially, or to reindex all content, run the
``reindex`` script that is available in EULindexer::

    $ python manage.py reindex -s keep


Misc
""""

The WAV to MP3 audio conversion task uses LAME to do the actual
encoding.  On Ubuntu systems, this can be installed using ``sudo
apt-get install lame``.


Install the Application
-----------------------

Apache
^^^^^^
After installing dependencies, copy and edit the wsgi and apache
configuration files in src/apache inside the source code checkout. Both will
probably require some tweaking for paths and such.


The application provides an RSS podcast feed intended for iTunes on
the MARBL reading room kiosk.  The URLs for the podcast feeds and MP3
files should be IP restricted at the Apache level to allow only those
machines that are permitted access to the content.  The url patterns
that should be restricted are::

    /audio/feeds/[0-9]+/             
    /audio/*/access.mp3         * is the fedora object pid


Configuration
^^^^^^^^^^^^^
Configure application settings by copying localsettings.py.sample to
localsettings.py and editing for local database, LDAP, fedora, PID manager,
eXist-DB and key configuration.

eXist-DB
""""""""

The Keep requires access to an eXist Database in order to
auto-generate Fedora collection objects based on EAD Finding Aid
documents.  All EXISTDB_* settings in the localsettings example file
should be configured for access to an eXist 1.4.x instance with
Finding Aids content.  It is recommended to configure eXist access
using guest access or a non-privileged account.

PID Manager
"""""""""""

Commenting out or removing any of the PIDMAN_* configuration options will
raise an error if the ``DEV_ENV`` setting is ``False`` (as is normal for a
production install). 

The configured PIDMAN_USER must have permission inside the pid
manager to add pids and targets.

----

After configuring all settings, initialize the db with all needed
tables and initial data using::

    $ python manage.py syncdb

Load Fedora fixtures and control objects to the configured repository
using::

     $ python manage.py syncrepo

Ingest clean-up cron job
^^^^^^^^^^^^^^^^^^^^^^^^
Configure the ingest cleanup script to run as a cron job.  This is a custom
manage.py script that cleans up the ingest staging temp directory so that
any uploaded files that are not successfully ingested into Fedora will 
be cleaned up.  The script cleans up files older than the age specified in 
localsettings.py.  When run with verbosity 0, only errors will be reported::

     $ python manage.py  ingest_cleanup -v 0

.. NOTE::
  This script will delete all files older than a specified age
  in the configured directory, so it should **not** be run as a
  privileged user.

Celery Daemon
^^^^^^^^^^^^^
The celery worker needs to be running for asynchronous tasks.  To run through
django do::

    $ python manage.py celeryd -Q keep

Note that we are using a different default queue so that keep-specific tasks
are not sent to a non-keep celery daemon.

See http://ask.github.com/celery/cookbook/daemonizing.html for instructions
on configuring celery to run as a daemon.


Notes for Developers
--------------------

The following instructions can be ignored when deploying to a staging
or production environment, but may be helpful to a developer working
on the project or running automated tests.

Session configuration
^^^^^^^^^^^^^^^^^^^^^

As of `Release 1.0 - Min Items, part IV`_ the project default Session configuration is set to mark
cookies as secure.  To enable login over HTTP (e.g. when developing with Django's runserver),
you will need to override this in your ``localsettings.py``.  See the commented out example in
``localsettings.py.sample``.

Fedora XACML policy
^^^^^^^^^^^^^^^^^^^

The version of the Fedora XACML policy checked into subversion is
configured for the production environment.  When this policy is
deployed to a development environment, you will want to edit the
deployed version to include the IP addresses of any servers that will
need to access Keep content for development or testing.

Test Setup
^^^^^^^^^^

Certain unit tests pass test user credentials to Fedora, in order to test and
simulate accessing Fedora as the logged in user.  For tests to work properly,
the unit test user should be defined (with appropriate permissions)
as a fedora account.  See :mod:`keep.audio.tests` for account details.


Upgrade Notes
=============

Release 1.5 (preliminary)
-------------------------

* This update includes Solr index changes; update Solr with the latest
  ``schema.xml`` and reindex site content.


Release 1.4 - search and ingest enhancements
--------------------------------------------

* The Keep has been updated to make use of Django's
  :mod:`~django.contrib.staticfiles` application for managing static
  files (i.e., website images, CSS, and Javascript).  The fabric
  deploy script will run the ``collectstatic`` manage command, which
  will collect all static files into the configured **STATIC_ROOT**
  path in ``settings.py`` (currently a ``static`` directory inside the
  deploy).  Existing apache configurations should be updated; instead
  of multiple aliases for sitemedia and genlib_media directories, a
  single alias should be set up for the ``/static`` URL, pointing at
  the configured static directory.  (See latest
  ``apache/the_keep.conf`` for an example.)
* This update includes Solr index changes; update Solr with the latest
  ``schema.xml`` and reindex site content.
* This update requires modifications to Fedora XACML policies; update
  Fedora with the latest polices and and reload them.
* Run syncdb to load the Born Digital group using the following command::

    $ python manage.py syncdb

* When the code is deployed to staging the ENABLE_BETA_WARNING
  variable should be set in localsettings.py::

    ENABLE_BETA_WARNING = True


Release 1.3 - Search-based Report generation
--------------------------------------------

* Fabric deploy script has been updated to follow latest fabfile best
  practices & local conventions.  Run ``fab -l`` and ``fab -d deploy``
  for usage details.
* The Keep has been updated to work with Solr 3.3.  Use the included
  solr configuration configurations or the Solr tarball created by the
  fabric deploy script to create a new Solr core and then use
  eulindexer to index all Keep content.
* Now that the ``old_dm`` migration has been completed, migration code
  has been removed.  Database configurations for **old_dm** and
  **accessions** databases should be removed from ``localsettings.py``.
* We are now using :mod:`south` to manage database migrations for
  emory_ldap (part of :mod:`eullocal`) and :mod:`djcelery`.  To update
  an existing database, you will need a few extra steps.  First, run
  ``syncdb`` to create the database tables for :mod:`south`. Then, to
  update emory_ldap, you will need to fake the initial migration, run
  migrations 0002 and 0003 normally, and then fake step 0004:: 
 
    $ python manage.py migrate --fake emory_ldap 0001
    $ python manage.py migrate emory_ldap 0003
    $ python manage.py migrate --fake emory_ldap 0004

   For :mod:`djcelery`, all djcelery_ and celery_ tables should be
   dropped from the database and recreated via migrate::

    $ python manage.py migrate djcelery


Release 1.2 - Verdict App
-------------------------

* Configure the LOGGING section in the localsettings.py file on the remote server
  based on the example in the localsettings.py.dist file.
  Log rotation need to be set for this file as well.

* Devloper should run the fabric deploy script:
    - On the local workstation, copy settings.json.dist to settings.json and configure
    - run::

        $ fab load_config:settings.json deploy

*  TheKeep XACML policies should be updated to the appropriate branch or tag:
    - Staging:: https://svn.library.emory.edu/svn/fedora/repository-policies/branches/release_1.9
    - Production:: https://svn.library.emory.edu/svn/fedora/repository-policies/tags/release_1.9

   - reload policies on fedora
    

* The solr schema should be updated:
    - Copy <project base>/solr/schema.xml to the appropriate solr core
    - Solr should be restarted

* The following manage commands shouldbe run:
    NOTE: when running these command you must be in the keep virtual environment::

    $ python ./manage.py syncdb
    $ python ./manage.py syncrepo

* The paths in the http config file should be verified since some have changed or may be different from enviroment to enviroment..

* At this point systems should move the link to point to the current version.



* Contact developer for these tasks:
    - Assign appropriate permissions for each user in the database
    - Load  P5300c objects to fedora using the command::

        $ python ./manage.py load_arrangement <CSV file> <master collection pid> <new simple collection name> -u <user> --password
      

* Reindex the site:
    - Make sure that eulindexer has an entry for "keep" in localsettings.py > INDEXER_SITE_URLS .
        - Staging:: https://testkeep.library.emory.edu/indexdata/
        - Production:: https://keep.library.emory.edu/indexdata/
        - EULIndexer should be restarted

.. Note::

  When running this command you must be in the eulindexer virtual
  environment.

    - Run the command::

        $ python ./manage.py reindex -s keep  

    - After the above commad finishes make sure the indxer is runnng so new items can be indexed


Release 1.1 - Metadata Migration
--------------------------------

* The kiosk RSS feed now links to files in the old Digital Masters datastore
  once their metadata records are in The Keep. This requires setting an
  **OLD_DM_MEDIA_ROOT** in localsettings. It should point to the root URL for
  preservation files. Our correct production setting is the one listed in
  ``localsettings.py.sample``.

* This release relies on new Fedora content model objects. Execute the
  following command to load them::

    $ python manage.py syncrepo

* The Keep now uses Solr for searching and eulindexer for indexing
  items.  Follow the directions in `Solr/EULindexer`_ to set up a new
  Solr index and add the Keep to EULindexer.  Before indexing existing
  content, run a one-time clean-up script to update existing objects
  in Fedora::

    $ python manage.py cleanup_metadata

  After this script completes, configure EULindexer and run its reindex
  script as described in `Solr/EULindexer`_ to populate the Solr index for
  existing repository content.  Make sure that the indexer script is running
  before migrating new content, so that newly ingested items will
  automatically be indexed.

* After existing content has been reindexed and the website has been
  verified to work correctly, prepare to migrate legacy metadata. First
  dry-run the migration script::

    $ python manage.py migrate_metadata -n -v2 -c migrate.csv > migrate.out

  Developers and project stakeholders will review migration output
  (``migrate.csv`` and ``migrate.out``). This review process will probably
  result in a request for a ``load_ead`` command as performed in Release 0.7
  below. Once the review and any additional configuration are complete, run
  the final metadata migration::

    $ python manage.py migrate_metadata -c migrate.csv > migrate.out

  The application does not use the CSV or output files. After the migration
  is complete, these files may be archived and/or deleted.

Release 1.0.3
-------------

* This release depends on a newer version of python-eulcore. Activate
  the virtualenv and update::

    $ pip install -r pip-dependencies

* Previously, the code did not add a name to PID records when
  generating ARKs for new objects.  To update the PID records with
  labels for objects that have already been created, the following
  code can be used in the django console:

  .. code-block:: python

    from keep.common.fedora import Repository
    from django.conf import settings
    from pidservices.djangowrapper.shortcuts import DjangoPidmanRestClient
    repo = Repository()
    pidman = DjangoPidmanRestClient()
    objs = repo.find_objects(owner=settings.FEDORA_OBJECT_OWNERID)
    for obj in objs:
        pidman.update_ark(obj.noid, name=obj.label)

Release 1.0.2
-------------

The Fedora XACML policy has been corrected for the production
environment.  Please update the Fedora policies to this tag:

https://svn.library.emory.edu/svn/fedora/repository-policies/tags/release_1.6.1

See `Fedora`_ configuration notes for additional information on
possible additional steps for customizing this policy (for
non-production environment).

Release 1.0 - Min Items, part IV
--------------------------------

* We are using a newer version of python-eulcore. To update::

    $ . /home/keep/env/bin/activate
    $ pip install -r pip-dependencies

* Django Session default configuration has been modified in ``settings.py``.  By default,
  the application will now store session data in the django cache (already in use by the application and configured via
  ``CACHE_BACKEND``), mark cookies as secure (HTTPS transfer only), expire after one week, and expire when the browser
  is closed.  Any of these configurations may be overridden in ``localsettings.py``.  For more details on configuration
  options, see `Django Sessions documentation <http://docs.djangoproject.com/en/1.2/topics/http/sessions/>`_ .

.. Note::
  Developers are affected by this configuration change and should consult `Notes for Developers`_.

Release 0.9 - Min Items, part III
---------------------------------

* The application now includes an asynchronous task for generating MP3 files,
  which requires LAME, celery configuration, and a celery broker.  See
  `Celery/RabbitMQ`_ and `Misc`_ in  `Install/Configure System
  Dependencies`_.  Celery and broker configurations are now required in
  localsettings.py (see localsettings.py.sample; search for BROKER).
  Running tasks requires that a celery worker process be run; see the
  `Celery Daemon`_ section in `Install the Application`_.

  New database tables in the relational database are required for the
  celery functionality.  To initialize them, run::

    $ python manage.py syncdb

* The application now provides an RSS podcast feed intended for iTunes on the
  MARBL reading room kiosk.  Due to limitations in the amount of data that iTunes
  can harvest in a single feed, the podcast feed generation logic expects a setting
  for MAX_ITEMS_PER_PODCAST_FEED.  See localsettings.py.sample for example 
  configuration and recommended value.

  When deployed in production, Apache should be configured to restrict access to
  the podcast feed and MP3 URLs. See the `Apache`_ section of `Install the
  Application`_ for details.

* Dependencies have been addded for celery tasks and MP3 error checking.
  To install the new dependencies::

    $ . /home/keep/env/bin/activate
    $ pip install -r pip-dependencies

* The application now uses an eulcore task result module to report on celery tasks,
  which requires additional tables in the relational database. To initialize them,
  sync the db::

    $ python manage.py syncdb

* New datastreams have been added to the Fedora Audio object.  Any audio objects
  loaded in the staging environment should be removed when this update is deployed.
  This can be done in the django console as follows. Start the console::

    $ python manage.py shell

  And then run:

  .. code-block:: python

    from keep.common.fedora import Repository
    from keep.audio.models import AudioObject
    repo = Repository()
    repo.get_objects_with_cmodel(AudioObject.AUDIO_CONTENT_MODEL)
    objs = repo.get_objects_with_cmodel(AudioObject.AUDIO_CONTENT_MODEL)
    for o in objs:
        repo.purge_object(o.pid)

* As part of branding this project with its new name, "The Keep", the pseudo-owner
  used for repository-level permissions has been changed.  The Fedora repository
  policies should be updated to
  https://svn.library.emory.edu/svn/fedora/repository-policies/branches/release_1.3
  Any existing objects will need to be either removed and re-generated or updated
  with the new owner ID.  Updating existing objects can be done in the django
  console.  Start the console::

    $ python manage.py shell

  Then run the following:

  .. code-block:: python

    from keep.common.fedora import Repository
    from django.conf import settings
    repo = Repository()
    objs = repo.find_objects(owner='euterpe-project')
    for o in objs:
        o.owner = settings.FEDORA_OBJECT_OWNERID
        o.save()
    
* As part of branding this project as "The Keep", the main source directory
  is now ``src/keep`` instead of ``src/digitalmasters`` .

Release 0.8 - Min Items, part II
--------------------------------

* The app now depends on the standard django ``sites`` module. This module
  stores some data in the relational database. To initialize it, sync the db::

    $ python manage.py syncdb

  After restarting the web app, configure the default site by replacing the
  ``example.com`` domain with the domain of the live webapp.
* Django caching for lists based on Fedora objects requires defining a
  CACHE_BACKEND in localsettings.py (see localsettings.py.sample)
* The namespace for Digital Technical metadata was modified; any Audio objects
  loaded in the staging environment should be removed when this update is
  deployed.  This can be done in the django console as follows. Start
  the console::

    $ python manage.py shell

  And then run:

  .. code-block:: python

    from keep.fedora import Repository
    from keep.audio.models import AudioObject
    repo = Repository()
    repo.get_objects_with_cmodel(AudioObject.AUDIO_CONTENT_MODEL)
    objs = repo.get_objects_with_cmodel(AudioObject.AUDIO_CONTENT_MODEL)
    for o in objs:
        repo.purge_object(o.pid)

* Support added for fetching new object pids from the pid manager. PID
  Manager configuration is now required in localsettings.py.  For
  example settings, see localsettings.py.sample (search for PIDMAN).

  See `PID Manager`_ in the `Configuration`_ section for additional details.


Release 0.7 - Min Items, part I
-------------------------------

* The new batch-upload/ingest process may result in uploaded files
  that will need to be cleaned up.  See `Ingest clean-up cron job`_ .

* Now requires access to eXist Database for the purpose of generating
  Fedora collection objects based on EAD Finding Aid documents; new
  configurations are required in localsettings.py; search
  localsettings.py.sample for EXISTDB.  See also the `eXist-DB`_
  section of `Configuration`_.

* Dependencies changed slightly. The current version depends on an updated
  version of :mod:`eulcore`, and we swapped our python-magic dependency for better
  Windows support. Remove the old dependencies and refresh them::

    $ . /home/keep/env/bin/activate
    $ pip uninstall eulcore python-magic
    $ pip install -r pip-dependencies

* After installation and configuration, ensure required numbering scheme
  objects are defined in fedora::

    $ python manage.py syncrepo

* After defining numbering schemes, admins may want to load collections from
  Finding Aids::

    $ python manage.py load_ead marbl 10 59 265 494 539 558 572 579 612 \
        616 618 622 629 644 653 663 673 682 685 687 689 741 745 771 797 \
        800 807 832 840 845 853 855 856 869 890 892 923 926 927 932 937 \
        960 966 968 981 1000 1002 1025 1032 1054 1056 1061
    $ python manage.py load_ead eua 8 11 26 60 113 1002


Release 0.6
-----------

* Requires Fedora 3.4 or greater with LDAP login configured.
* Requires Fedora XACML policies (bundled with other local policies in
  https://svn.library.emory.edu/svn/fedora/repository-policies/ )
* After django application and Fedora are both configured, run
  syncrepo to load Fedora fixtures and control objects::

    $ python manage.py syncrepo


